<template>
    <div id="Ex4Main" class="main">
         <!-- <div class="table-head-box">
            <table class="table-head">
                <th class="table-head-name" @click="handleSort('name')">name</th>
                <th class="table-head-type" >type</th>
                <th class="table-head-country" >country</th>
                <th class="table-head-url" >website_url</th>
            </table>
        </div> -->
        <div class="table-head-box">
        <table class="table-head">
        <th class="table-head-name" :class="{ up: this.count === 1, down: this.count === 2}" @click="handleNameSortClick()">name</th>
                <th class="table-head-type" :class="{ up: this.count === 4, down: this.count === 5}" @click="handleTypeSortClick()">type</th>
                <th class="table-head-country" :class="{ up: this.count === 7, down: this.count === 8}" @click="handleCountrySortClick()">country</th>
                <th class="table-head-url" :class="{ up: this.count === 10, down: this.count === 11}" @click="handleUrlSortClick()">website_url</th>
                </table>
                </div>
         <div class="box" v-for="(item, idx) in items" :key="idx">
            <tr class="table" :class="{ odd: idx % 2 === 0}" @click="handleModalItem(item)">
                <div class="table-body-header">
                    <td class="header-idx" >{{idx + 1}}</td>
                    <td class="header-name">{{ item.name }}</td>
                    <td class="header-type">{{ item.brewery_type }}</td><br>
                    <td class="header-country">{{ item.country }}</td><br>
                    <td class="header-url"><a :href="item.website_url">{{ item.website_url }}</a></td>
                    <br>
                </div>
            </tr>
        </div>
         <div class="pagination">
            <button class="pagination-button" @click="handlePageDown()">&#60; </button>
            <div class="pagination-btn" v-for="i in 10" :key="i" @click="handlePage(i)">
                <button class="pagination-button currentPage" v-if="pageNum === i">{{i}}</button>
                <button class="pagination-button" v-else>{{i}}</button>
            </div>
            <button class="pagination-button" @click="handlePageUp()"> &#62;</button>
        </div>
        <Exam5Modal :modalItem="selectedItem" :modalVisible="visible" @modalVisible="handleModalVisible"/>
    </div>
</template>

<script>
import axios from 'axios';
import Exam5Modal from './Exam5Modal';

    export default {
        name:"Ex4Main",
        components:{    
            Exam5Modal
        },
        props: {
        },
        created(){
        },
        data() {
            return {
               items: [],
               selectedItem: {},
               visible: true,
               pageNum: 1,
               count: 0,
               sortBy: null,
            }
        },
        mounted() {
          axios.get("https://api.openbrewerydb.org/breweries?page=" + this.pageNum + "&per_page=15")
          .then(res => res.data)
          .then(data => data.map( data => {
            return {
              ...data,
              visible: true
              }
            }))
            .then(data => this.items = data)
            .catch(error => console.log(error));
        },
        computed: {
            // sortData(){
            //     this.items.sort(function(a, b) {
            //         let nameA = a[this.sortBy].toUpperCase(); // ignore upper and lowercase
            //         let nameB = b[this.sortBy].toUpperCase(); // ignore upper and lowercase
            //         if (nameA < nameB) {
            //             return -1;
            //         }
            //         if (nameA > nameB) {
            //           return 1;
            //         }            
            //         return 0;
            //     });
            // }
                           sortName(){
                return (type) => this.items.sort(function(a, b) {
                    let nameA = a.name.toUpperCase(); // ignore upper and lowercase
                    let nameB = b.name.toUpperCase(); // ignore upper and lowercase
                      if(type === 'up'){
                        if (nameA < nameB) {
                            return -1;
                          }
                          if (nameA > nameB) {
                            return 1;
                          }            
                          return 0;
                      }else{
                        if (nameA < nameB) {
                          return 1;
                        }
                        if (nameA > nameB) {
                          return -1;
                        }            
                        return 0;
                      }
                });
            },
              sortType(){
                return (type) => this.items.sort(function(a, b) {
;                 let nameA = a.brewery_type.toUpperCase(); // ignore upper and lowercase
                  let nameB = b.brewery_type.toUpperCase(); // ignore upper and lowercase
                  if(type === 'up'){
                    if (nameA < nameB) {
                        return -1;
                      }
                      if (nameA > nameB) {
                        return 1;
                      }            
                      return 0;
                  }else{
                    if (nameA < nameB) {
                      return 1;
                    }
                    if (nameA > nameB) {
                      return -1;
                    }            
                    return 0;
                  }
                });
            },
              sortCountry(){
                return (type) => this.items.sort(function(a, b) {
                  let nameA = a.country.toUpperCase(); // ignore upper and lowercase
                  let nameB = b.country.toUpperCase(); // ignore upper and lowercase
                  if(type === 'up'){
                    if (nameA < nameB) {
                        return -1;
                      }
                      if (nameA > nameB) {
                        return 1;
                      }            
                      return 0;
                  }else{
                    if (nameA < nameB) {
                      return 1;
                    }
                    if (nameA > nameB) {
                      return -1;
                    }            
                    return 0;
                  }
                });
            },
              sortUrl(){
                return (type) => this.items.sort(function(a, b) {
                  let nameA = a.website_url.toUpperCase(); // ignore upper and lowercase
                  let nameB = b.website_url.toUpperCase(); // ignore upper and lowercase
                  if(type === 'up'){
                    if (nameA < nameB) {
                        return -1;
                      }
                      if (nameA > nameB) {
                        return 1;
                      }            
                      return 0;
                  }else{
                    if (nameA < nameB) {
                      return 1;
                    }
                    if (nameA > nameB) {
                      return -1;
                    }            
                    return 0;
                  }
                });
            },
        },
        methods: {
            handleSort(section){
                console.log(section);
                this.sortBy = section;
                console.log(this.sortBy);
                this.sortData(section);
            },
            handleNameSortClick(){
                if( 0 <= this.count && this.count <= 2){
                    this.count++;
                    if(this.count === 1 ){
                        this.sortName('up');
                    }else if(this.count === 2){
                        this.sortName('down');
                    }else{
                        this.count = 0;
                        this.fetchMoreItems();
                    }
                }else{
                    this.count = 1;
                    this.sortName('up');
                }
            },
            handleTypeSortClick(){
                if( 3 <= this.count && this.count <= 5){
                    this.count++;
                    if(this.count === 4 ){
                        this.sortType('up');
                    }else if(this.count === 5){
                        this.sortType('down');
                    }else{
                        this.count = 3;
                        this.fetchMoreItems();
                    }
                }else{
                    this.count = 4;
                    this.sortType('up');
                }
            },
             handleCountrySortClick(){
                if( 6 <= this.count && this.count <= 8){
                    this.count++;
                    if(this.count === 7 ){
                        this.sortCountry('up');
                    }else if(this.count === 8){
                        this.sortCountry('down');
                    }else{
                        this.count = 6;
                        this.sortCountry('up');
                    }
                }else{
                    this.count = 7;
                    this.fetchMoreItems();
                }
            },
            handleUrlSortClick(){
               if( 9 <= this.count && this.count <= 11){
                    this.count++;
                    if(this.count === 10 ){
                        this.sortUrl('up');
                    }else if(this.count === 11){
                        this.sortUrl('down');
                    }else{
                        this.count = 9;
                        this.fetchMoreItems();
                    }
                }else{
                    this.count = 10; 
                    this.sortUrl('up');
                }
            },
            handleModalItem(item){
            this.selectedItem = item;
            this.visible = !this.visible;
        },
            handleModalVisible(visible){
                this.visible = visible;
            },
            handlePage(i){
            this.count = 0;
              this.pageNum = i;
              this.fetchMoreItems();
            },
            handlePageDown(){
                if(this.pageNum === 1){
                    this.pageNum = 11;
                }
                this.pageNum -= 1;
                this.fetchMoreItems();
            },
            handlePageUp(){
                 if(this.pageNum === 10){
                    this.pageNum = 0;
                }
                this.pageNum += 1;
                this.fetchMoreItems();
            },
            fetchMoreItems (){
                axios.get("https://api.openbrewerydb.org/breweries?page="+this.pageNum+"&per_page=15")
                .then(res => res.data)
                .then(data => data.map(res => {
                  return {
                    ...res,
                    visible: true
                  }
                }))
                .then(res => { 
                  this.items = res;
                   })
                .catch(error => console.log(error));
            },
        }
    };
</script>

<style scoped>
    .main{
        width: 100%;
        display: flex;
        flex-direction: column;
        justify-items:  center;
        align-items: center;
    }
    .main .box{
        margin-left: 0;
        width: 100%;
    }
    .up:after{
        content:" \2191";
    }
    .down:after{
        content:" \2193";
    }
    .odd{
        background-color: #bdc3c7;
    }
    .box .table {
        margin: 0;
        padding-top: 20px;
        padding-bottom: 20px;
        width: 100%;
        border-bottom: 1px solid black;
        display: flex;
        flex-direction: row;
        justify-content: flex-start;
        align-items: center;
    }
    .box .table:hover{
        background-color: #c7ecee;
    }

    .table .table-body-header {
        width: 100%;
        display: flex;
        flex-direction: row;
        justify-content: flex-start;
    }
    .table .table-body-header .header-idx{
        padding-left: 5px;
        margin-right: 3px;
    }
    
    .table .table-body-header .header-name{
        width: 25%;
        padding-left: 10px;
    }
    .table .table-body-header .header-type, .header-country, .header-url
    /* .table .table-body-header .header-country,
    .table .table-body-header .header-url */
    {
        width: 25%;
    }
    .table-head-box{
        width: 100%;
    }
    .table-head-box .table-head{
        padding: 10px 0 10px 0;
        width: 100%;
        margin-right: 0;
        display: flex;
        flex-direction: row;
        justify-content: flex-start;
        border-bottom: 1px solid gray;
    }

    .table-head-box .table-head .table-head-name{
        width: 25%;
        padding-left: 25px;
        text-align: left;
    }
    .table-head-box .table-head .table-head-type, .table-head-country, .table-head-url{
        width: 25%;
        text-align: left;
    }
    .pagination{
        width: 20%;
        padding-top: 10px;
        padding-bottom: 10px;
        display: flex;
        flex-direction: row;
        align-content: center;
    }

    .pagination .pagination-btn{
        display: flex;
        flex-direction: row;
        justify-items: center;
    }
    .pagination-button{
        font-size: 20px;
        border: none;
        background-color: white;
        cursor: pointer;
    }
    .pagination-button:hover{
        background-color: #c7ecee;
    }
    .currentPage{
        color: #e55039;
    }
</style>